<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.websock-poc</groupId>
        <artifactId>websock-poc</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <groupId>com.websock-poc</groupId>
    <artifactId>webapp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>webapp</name>

    <properties>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <slf4jVersion>1.6.1</slf4jVersion>
    </properties>
    
    <dependencies>
        <!-- EE Container-provided WebSockets dependency -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- Standalone (non-EE Container) WebSockets dependency
        <dependency>
            <groupId>javax.websocket</groupId>
            <artifactId>javax.websocket-api</artifactId>
            <version>1.0</version>
            <scope>provided</scope>
        </dependency>
        -->
                
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Tyrus Web Socket dependencies for unit tests -->
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-server</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-client</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-container-grizzly</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <compilerArguments>
                        <endorseddirs>${endorsed.dir}</endorseddirs>
                    </compilerArguments>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <!-- KL : Override .war name (so it's websock-webapp.war) instead of webapp.war and
                    without the 1.0-SNAPSHOT nonsense. -->
                    <warName>websock-webapp</warName>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>     
            <plugin>
            <!-- HACK: /websock-poc/webapp/src/main/java/com/websockpoc/webapp/WebAppConstants class
            contains shared constants that need to be re-used by other projects. It is included in the 
            webapp-1.0-SNAPSHOT-tests.jar (since com.websock-poc:webapp:war artifact is a websock-webapp.war 
            (not a .jar) and can't include shared .class'es in websock-webapp.war).
            Shared files should really be in the /domain or /common sibling module instead,
            but WebAppConstants.class is about web stuff so it's ok for now. -->                
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/test-classes/com/websockpoc/webapp</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/target/classes/com/websockpoc/webapp</directory>
                                    <includes>
                                        <include>WebAppConstants.class</include>
                                    </includes>
                                </resource>
                            </resources>              
                        </configuration>            
                    </execution>
                </executions>
            </plugin>
            <plugin>
            <!-- IMPORTANT: package the tests into webapp-1.0-SNAPSHOT-tests.jar (com.websock-poc:webapp:jar:tests:1.0-SNAPSHOT:test) 
            so that :
                1.  /websock-poc/webapp/src/test/java/com/websockpoc/webapp/WebSocketClientEndpoint.java 
                2.  /websock-poc/webapp/src/main/java/com/websockpoc/webapp/WebAppConstants.java 
            could be reused by other projects (such as /websock-poc/wildfly and /websock-poc/jetty). These projects should 
            declare this            
                <dependency>
                    <groupId>com.websock-poc</groupId>
                    <artifactId>webapp</artifactId>
                    <version>1.0-SNAPSHOT</version>
                    <type>test-jar</type>
                    <scope>test</scope>
                </dependency>                                            
            in their pom.xml to do so. 
            -->                
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Wildfly 8 plugin that can :
                1.  start Wildfly (without deploying the application produced by this project)
                    $ mvn -Dmaven.test.skip=true wildfly:start -Dwildfly.version=8.0.0.CR1
                2.  start Wildfly and deploy the application produced by this project (see (*) below).
                    $ mvn -Dmaven.test.skip=true wildfly:run -Dwildfly.version=8.0.0.CR1 
                3.  deploying the application produced by this project (see (*) below) into already started Wildfly 8 instance
                    $ mvn -Dmaven.test.skip=true wildfly:deploy -Dwildfly.version=8.0.0.CR1
                etc.. etc.. please see https://docs.jboss.org/wildfly/plugins/maven/latest/plugin-info.html
                for more.
                
                (*) - Note that in the case of this module, the final .war is renamed
                to websock-webapp.war (from default webapp-1.0-SNAPSHOT.war derived
                from its mvn coordinates). Hence, need to specify this updated name with
                    <configuration>
                        <filename>websock-webapp.war</filename>
                    </configuration>                 
                below.
                
                If Wildfly 8 instance is not installed yet, then all of the above commands will first download (its .zip), 
                extract (.zip) and install Wildfly 8 instance.
            -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>1.0.0.Beta1</version>
                <configuration>
                    <filename>websock-webapp.war</filename>
                </configuration>
                
                <!-- By default everything happens in the install phase, but this
                can be overriden by changing below.
                <executions>                    
                    <execution>
                        <id>deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>                    
                -->
            </plugin>
        </plugins>
    </build>

</project>
