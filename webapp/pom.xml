<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.websock-poc</groupId>
        <artifactId>websock-poc</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <groupId>com.websock-poc</groupId>
    <artifactId>webapp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>webapp</name>

    <properties>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <slf4jVersion>1.6.1</slf4jVersion>
    </properties>
    
    <dependencies>
        <!-- EE Container-provided WebSockets dependency -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- Standalone (non-EE Container) WebSockets dependency
        <dependency>
            <groupId>javax.websocket</groupId>
            <artifactId>javax.websocket-api</artifactId>
            <version>1.0</version>
            <scope>provided</scope>
        </dependency>
        -->
                
        <dependency>
            <groupId>com.websock-poc</groupId>
            <artifactId>common</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>jar</type>       
        </dependency>
                
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Tyrus Web Socket dependencies for unit tests -->
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-server</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-client</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.tyrus</groupId>
            <artifactId>tyrus-container-grizzly</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <compilerArguments>
                        <endorseddirs>${endorsed.dir}</endorseddirs>
                    </compilerArguments>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <!-- KL : Override .war name (so it's websock-webapp.war) instead of webapp.war and
                    without the 1.0-SNAPSHOT nonsense. -->
                    <warName>websock-webapp</warName>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!-- Wildfly 8 plugin please see https://docs.jboss.org/wildfly/plugins/maven/latest/plugin-info.html)
                that can :
                1.  start Wildfly (without deploying the application produced by this project)
                    $ mvn -Dmaven.test.skip=true wildfly:start -Dwildfly.version=8.0.0.CR1
                2.  start Wildfly and deploy the application produced by this project (see (*) below).
                    $ mvn -Dmaven.test.skip=true wildfly:run -Dwildfly.version=8.0.0.CR1 
                3.  deploying the application produced by this project (see (*) below) into already started Wildfly 8 instance
                    $ mvn -Dmaven.test.skip=true wildfly:deploy -Dwildfly.version=8.0.0.CR1
                
                (*) - Note that in the case of this module, the final .war is renamed
                to websock-webapp.war (from default webapp-1.0-SNAPSHOT.war derived
                from its mvn coordinates). Hence, need to specify this updated name with
                    <configuration>
                        <filename>websock-webapp.war</filename>
                    </configuration>                 
                below.
                
                If Wildfly 8 instance is not installed yet, then all of the above commands will first download (its .zip), 
                extract (.zip) and install Wildfly 8 instance.
            -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>1.0.0.Beta1</version>
                <configuration>
                    <filename>websock-webapp.war</filename>
                </configuration>
                
                <!-- By default everything happens in the install phase, but this
                can be overriden by changing below.
                <executions>                    
                    <execution>
                        <id>deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>                    
                -->
            </plugin>
            <!-- Jetty 9 plugin (see http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html)
            that has similar functionality in the Wildfly 8 plugin. Useful command is :
                $ mvn -Dmaven.test.skip=true jetty:run-war
            which starts Jetty 9 and deploys the application produced by this project (ie. websock-webapp.war).
            -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.1.0.RC2</version>
                <configuration>
                    <webAppConfig>
                        <contextPath>/websock-webapp</contextPath>
                    </webAppConfig>
                    <war>${basedir}/target/websock-webapp.war</war>
                </configuration>
            </plugin>
            
        </plugins>
    </build>

</project>
